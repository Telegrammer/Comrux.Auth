"""Setup email table

Revision ID: 5ab26fe9ffb5
Revises: 353d5f4f8902
Create Date: 2025-09-29 14:38:42.361563

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import uuid
from infrastructure import EmailUuid4Generator


# revision identifiers, used by Alembic.
revision: str = "5ab26fe9ffb5"
down_revision: Union[str, Sequence[str], None] = "353d5f4f8902"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    id_generator = EmailUuid4Generator()
    op.create_table(
        "emails",
        sa.Column("id_", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("address", sa.String(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id_"],
        ),
        sa.PrimaryKeyConstraint("id_"),
        sa.UniqueConstraint("address"),
    )

    conn = op.get_bind()

    # --- КОПИРУЕМ ДАННЫЕ ИЗ users.email В emails ---
    # Получаем все user.id_ + email (пропускаем NULL)
    rows = conn.execute(sa.text("SELECT id_, email FROM users WHERE email IS NOT NULL")).fetchall()

    to_insert = []
    for user_id, email_addr in rows:
        to_insert.append({
            "id_": uuid.UUID(id_generator().value),
            "user_id": user_id,
            "address": email_addr,
            "is_verified": False,  
        })

    if to_insert:
        insert_sql = sa.text(
            "INSERT INTO emails (id_, user_id, address, is_verified) "
            "VALUES (:id_, :user_id, :address, :is_verified)"
        )
        conn.execute(insert_sql, to_insert)

    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_column("users", "email")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    conn = op.get_bind()

    # 1. Добавляем колонку обратно
    op.add_column(
        "users",
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=True),
    )

    # 2. Копируем email из emails в users
    # (берём только один email на пользователя, если их несколько — выбираем первый)
    rows = conn.execute(sa.text("""
        SELECT user_id, address
        FROM emails
        GROUP BY user_id, address
    """)).fetchall()

    for user_id, email_addr in rows:
        conn.execute(
            sa.text("UPDATE users SET email = :email WHERE id_ = :user_id"),
            {"email": email_addr, "user_id": user_id},
        )

    # 3. Создаём индекс (и ограничение уникальности)
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)

    # 4. Удаляем emails
    op.drop_table("emails")
