from uuid import UUID

_last_v7_timestamp = None

def uuid7():
    """The UUIDv7 format is designed to encode a Unix timestamp with
    arbitrary sub-second precision.  The key property provided by UUIDv7
    is that timestamp values generated by one system and parsed by
    another are guaranteed to have sub-second precision of either the
    generator or the parser, whichever is less.  Additionally, the system
    parsing the UUIDv7 value does not need to know which precision was
    used during encoding in order to function correctly."""

    global _last_v7_timestamp
    import random
    import time

    nanoseconds = time.time_ns()
    if _last_v7_timestamp is not None and nanoseconds <= _last_v7_timestamp:
        nanoseconds = _last_v7_timestamp + 1
    _last_v7_timestamp = nanoseconds
    timestamp_s, timestamp_ns = divmod(nanoseconds, 10**9)
    subsec_a = timestamp_ns >> 18
    subsec_b = (timestamp_ns >> 6) & 0x0FFF
    subsec_seq_node = (timestamp_ns & 0x3F) << 56
    subsec_seq_node += random.SystemRandom().getrandbits(56)
    uuid_int = (timestamp_s & 0x0FFFFFFFFF) << 92
    uuid_int += subsec_a << 80
    uuid_int += subsec_b << 64
    uuid_int += subsec_seq_node
    return UUID(int=uuid_int)

def extract_timestamp_from_uuid7(uuid_obj):
    """Extract timestamp from UUIDv7 object"""
    uuid_int = uuid_obj.int
    
    # Extract components according to UUIDv7 structure
    timestamp_s = (uuid_int >> 92) & 0x0FFFFFFFFF  # 36 bits for seconds
    subsec_a = (uuid_int >> 80) & 0x0FFF           # 12 bits
    subsec_b = (uuid_int >> 64) & 0x0FFF           # 12 bits
    subsec_c = (uuid_int >> 56) & 0x3F             # 6 bits
    
    # Reconstruct nanoseconds
    timestamp_ns = (subsec_a << 18) | (subsec_b << 6) | subsec_c
    
    # Calculate total nanoseconds
    total_ns = timestamp_s * 10**9 + timestamp_ns
    
    return total_ns
